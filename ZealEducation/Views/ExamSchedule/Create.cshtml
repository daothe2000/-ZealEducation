@model DataAccess.ExamSchedule

@{
    ViewBag.Title = "Create";
}

<script src="~/Content/assets/js/toastr.min.js"></script>
<link href="~/Content/AdminTempale/css/toastr.min.css" rel="stylesheet" />
<input type="hidden" id="success" value="@TempData["success"]" />
<input type="hidden" id="info" value="@TempData["info"]" />
<input type="hidden" id="info" value="@TempData["warning"]" />
<input type="hidden" id="error" value="@TempData["error"]" />

<div class="breadcrumbs-area">
    <h3>ExamSchdule</h3>
    <ul>
        <li>
            @Html.ActionLink("Back to List", "Index")
        </li>
        <li>Add ExamSchdule</li>
    </ul>
</div>
<!-- Breadcubs Area End Here -->
<!-- Admit Form Area Start Here -->
<div class="card height-auto">
    <div class="card-body">
        <div class="heading-layout1">
            <div class="item-title">
                <h3>Add New ExamSchdule</h3>
            </div>
            
        </div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal new-added-form">
                <div class="row">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        <label>Class Name *</label>
                        <div>
                            @if (ViewBag.ClassList != null)
                            {
                                @Html.DropDownListFor(m => m.ClassId, (IEnumerable<SelectListItem>)ViewBag.ClassList as SelectList, "-- Select Class --", new { @class = "select2 form-control", @id = "ClassID" });

                            }

                            @*@Html.DropDownList("ClassID", null, htmlAttributes: new { @class = "form-control" })*@
                            @Html.ValidationMessageFor(model => model.ClassId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        <label>Subject Name *</label>
                        <div>
                            @*@Html.DropDownListFor(m => m.SubjectID, new SelectList(""), "-- Select Subject --", new { @class = "form-control" })*@
                            <select id="SubjectID" name="SubjectID" class="select2 form-control">
                                <option value="">Select Subject</option>
                            </select>
                            @*@Html.DropDownList("SubjectID", null, htmlAttributes: new { @class = "form-control" })*@
                            @Html.ValidationMessageFor(model => model.SubjectID, "", new { @class = "text-danger" })
                        </div>
                    </div>



                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        @Html.LabelFor(model => model.Examday)
                        <div>
                            @*@Html.EditorFor(model => model.Day, new { htmlAttributes = new { @class = "form-control" } })*@
                            <input type="text" id="Examday" name="Examday" placeholder="dd/mm/yyyy" class="form-control"
                                   data-position='bottom right'>
                            <i class="far fa-calendar-alt"></i>
                            @Html.ValidationMessageFor(model => model.Examday, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        @Html.LabelFor(model => model.TimeIn)
                        <div>
                            <input type="text" id="TimeIn" name="TimeIn" class="form-control" placeholder="hh:ii">

                            @*@Html.EditorFor(model => model.TimeIn, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.TimeIn, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        @Html.LabelFor(model => model.TimeOut)
                        <div>
                            <input type="text" id="TimeOut" name="TimeOut" class="form-control" placeholder="hh:ii">

                            @*@Html.EditorFor(model => model.TimeOut, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.TimeOut, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        @Html.LabelFor(model => model.Note)
                        <div>
                            <textarea class="form-control" name="Note" rows="3" placeholder="Note..."></textarea>

                            @*@Html.EditorFor(model => model.TimeOut, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-xl-3 col-lg-6 col-12 form-group">
                        @Html.LabelFor(model => model.RoomID, "RoomID")
                        <div>
                            @Html.DropDownList("RoomID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.RoomID, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-12 form-group mg-t-8">
                        <button type="submit" value="Create" class="btn-fill-lg btn-gradient-yellow btn-hover-bluedark">Save</button>
                        <button type="reset" class="btn-fill-lg bg-blue-dark btn-hover-yellow">Reset</button>
                    </div>
                </div>
            </div>
        }

    </div>
</div>


@section Scripts{
    <script src="~/Content/assets/js/ab.js"></script>
    
    <script>


        $(document).ready(function () {
            $("#ClassID").change(function () {
                $.get("/ExamSchedule/GetSubjectList", { ClassId: $("#ClassID").val() }, function (data) {
                    $("#SubjectID").empty();
                    $("#SubjectID").append("<option value=''>-- Select Subject --</option>");
                    $.each(data, function (index, row) {
                        $("#SubjectID").append("<option value='" + row.SubjectID + "'>" + row.SubjectName + "</option>");
                    })
                })
            })
            $('#TimeIn').flatpickr({
                enableTime: true,
                noCalendar: true,
                dateFormat: "H:i"
            });
            $('#TimeOut').flatpickr({
                enableTime: true,
                noCalendar: true,

                dateFormat: "H:i"
            });
            var minDate = new Date();
            minDate.setDate(minDate.getDate() + 2);
            $('#Examday').flatpickr({
                minDate: minDate,

                dateFormat: "d-m-Y",
            });
        })


    </script>
    <script>
        $(function () {
            if ($('#success').val()) {
                displayMessage($('#success').val(), 'success');
            }
            if ($('#info').val()) {
                displayMessage($('#info').val(), 'info');
            }
            if ($('#warning').val()) {
                displayMessage($('#warning').val(), 'warning');
            }
            if ($('#error').val()) {
                displayMessage($('#error').val(), 'error');
                $('#ClassID').prop('selectedIndex', 0);
            }
        });
        var displayMessage = function (message, msgType) {
            toastr.options = {
                "closeButton": true,
                "debug": false,
                "positionClass": "toast-top-right",
                "onClick": null,
                "showDuration": "3000",
                "hideDuration": "1000",
                "timeOut": "8000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };
            toastr[msgType](message);
        };
    </script>
}
